#Import required python packages
import networkx as nx
import sys
import matplotlib.pyplot as plt
import pygraphviz as pgv
import operator
import os
from networkx.utils import is_string_like


def merge_inner(a,b):
    #list of edges coming out of a. by allele label. a.edges = list of edges coming out of a
    a_edges = A.out_edges(a, data=True)
    b_edges = A.out_edges(b, data=True)
    print "entering merge inner for a:%d b:%d" % (a, b)
    print a_edges
    print b_edges
      
    for i in a_edges:
        x = i[2]['allele']

        y = None
        for iterator in b_edges:
            if iterator[2]['allele'] == x:
                y = iterator

        if y is not None:
            b_edges.remove(y)
            
           
            
            #get edge from b corresponding to i
            j = y

            print 'i is'
            print i
            print 'j is'
            print j
            
            A.edge[i[0]][i[1]][0]['weight'] = A.edge[i[0]][i[1]][0]['weight'] + A.edge[j[0]][j[1]][0]['weight']
            

            #recurse
            print "yes we will recurse"
            merge_inner(i[1],j[1])

            

            A.remove_edge(y[0],y[1])
            print y[1]
            A.remove_node(y[1])
   
    print 'missing edges are'
    print b_edges

    for k in b_edges:
        A.add_weighted_edges_from([(a, k[1], k[2]['weight'])], allele = k[2]['allele'])
        A.remove_edge(k[0],k[1])
   
    #a.edges.add(missing_edges)
    print "leaving merge inner for a:%d b:%d" % (a, b)
      
def merge(a, b):
    merge_inner(a,b)

    b_in = A.in_edges(b, data=True)
    print 'b_in'
    for i in b_in:
        print i
    
        A.add_weighted_edges_from([(i[0], a, i[2]['weight'])], allele = i[2]['allele'])
        A.remove_edge(i[0],i[1])
    A.remove_node(b)
    

    # parent.delete(b)
A = nx.MultiDiGraph()
A.add_weighted_edges_from([(1,2,3.5),(2,4,5.0),(4,8,9.0),(5,10,2.7),(3,6,6.0),(6,11,7.0),(7,12,4.0)], allele=1)
A.add_weighted_edges_from([(1,3,5.0),(2,5,1.0),(4,9,2.0),(3,7,8.0),(7,13,1.0)], allele=2)



def plot_tree(G, name='plot.png'):
    #Create undirected graph from directed graph for visualization purposes           
    N=G.to_undirected()        

    plt.clf()
    #Set vizualization layout
    prog ='dot'
    pos = nx.drawing.graphviz_layout(G, prog)

    #Mark edges with labels corresponding to the weight of the edge
    edge_labels=dict([((u,v,),d['weight']) for u,v,d in N.edges(data=True)])

    #Draw edge labelsquit()

    nx.draw_networkx_edge_labels(G,pos,edge_labels=edge_labels)

    #Create edge_colours list and iterate through edges of graph H
    edge_colours=[]
    for u,v,d in N.edges(data=True):
        #If allele is labelled 1 append colour MidnightBlue
       
        if d['allele'] == 1:
            edge_colours.append('MidnightBlue')
            #Otherwise append the colour LightBlue
        else:
            edge_colours.append('LightBlue')

    #Draw the graph using edge_colours calculated previously
    nx.draw(N, pos, node_size=100, node_color='w', edge_color=edge_colours, width=4, with_labels=False)


    #os.remove('plot.png')

    #plt.show()
    #Show plot in window
    plt.savefig(name)








#print A.edges(data=True)

#a_edges = A.out_edges(1, data=True)

#print a_edges

#print a_edges[1][2]['allele']

plot_tree(A, name='before_merge.png')

merge(2,3)



plot_tree(A, name='after_merge.png')

print A.edges(data=True)
for i in A.adjacency_iter():
    print i


